! function (i) {var e = {init: function (e) {var t = {timer: null, timerSeconds: 10, callback: function () {}, timerCurrent: 0, showPercentage:! 1, isi:! 1 , color: "# CCC"}; return t = i.extend (t, e), this.each (function () {var e = i (this); e.data ("pietimer") || (e. addClass ("pietimer"), e.css ({fontSize: e.width ()}), e.data ("pietimer", t), t.showPercentage && e.find (". persen"). show (), t .fill && e.addClass ("fill"), e.pietimer ("start"))})}, stopWatch: function () {var e = i (ini) .data ("pietimer"); if (e) {var t = (e.timerFinish- (Tanggal baru) .getTime ()) / 1e3; jika (t <= 0) clearInterval (e.timer), i (ini) .pietimer ("drawTimer", 100), e.callback (); lain {var r = 100-t / e.timerSeconds * 100; i (ini) .pietimer ("drawTimer", r)}}}, drawTimer: function (e) {$ this = i (this); var t = $ this.data ("pietimer"); if (t) {$ this.html ('<div class = "persen"> </div> <div class = "slice' + (e> 50? 'gt50"': '"') + '> <div class =" pie "> </ div> '+ (e> 50?' <div class = "pie fill"> </div> ': "") + "</div>"); var r = 3.6 * e; $ this.find (" .slice .pie "). css ({" - moz-transform ":" rotate ("+ r +" deg) "," - webkit-transform ":" rotate ("+ r +" deg) "," - o- transform ":" rotate ("+ r +" deg) ", transform:" rotate ("+ r +" deg) "}), $ this.find (". persen "). html (Math.round (e) +" % "), t.showPercentage && $ this.find (". persen "). show (), $ this.hasClass (" fill ")? $ this.find (". slice .pie "). css ({backgroundColor: t.color}): $ this.find (". slice .pie"). css ({borderColor: t.color})}}, mulai: function () {var e = i (ini) .data ("pietimer"); e && (e.timerFinish = (Tanggal baru) .getTime () + 1e3 * e.timerSeconds, i (ini) .pietimer ("drawTimer", 0), e.timer = setInterval ("$ this.pietimer ('stopWatch')", 50)) }, reset: function () {var e = i (ini) .data ("pietimer"); e && (clearInterval (e.timer), i (ini) .pietimer ("drawTimer", 0))}}; i .fn.pietimer = fungsi (t) {return e [t]? e [t]. berlaku (ini, Array.prototype.slice.call (argumen, 1)): "objek"! = type t && t? batal i. kesalahan ("Metode" + t + "tidak ada di jQuery.pietimer"): e.init.apply (ini, argumen)}} (jQuery);timerSeconds, i (this) .pietimer ("drawTimer", 0), e.timer = setInterval ("$ this.pietimer ('stopWatch')", 50))}, reset: function () {var e = i ( this). data ("pietimer"); e && (clearInterval (e.timer), i (ini) .pietimer ("drawTimer", 0))}}; i.fn.pietimer = fungsi (t) {return e [ t]? e [t] .apply (this, Array.prototype.slice.call (argumen, 1)): "object"! = typeof t && t? batal i.error ("Metode" + t + "tidak ada di jQuery .pietimer "): e.init.apply (ini, argumen)}} (jQuery);timerSeconds, i (this) .pietimer ("drawTimer", 0), e.timer = setInterval ("$ this.pietimer ('stopWatch')", 50))}, reset: function () {var e = i ( this). data ("pietimer"); e && (clearInterval (e.timer), i (ini) .pietimer ("drawTimer", 0))}}; i.fn.pietimer = fungsi (t) {return e [ t]? e [t] .apply (this, Array.prototype.slice.call (argumen, 1)): "object"! = typeof t && t? batal i.error ("Metode" + t + "tidak ada di jQuery .pietimer "): e.init.apply (ini, argumen)}} (jQuery);slice.call (argumen, 1)): "object"! = typeof t && t? void i.error ("Metode" + t + "tidak ada di jQuery.pietimer"): e.init.apply (ini, argumen)} } (jQuery);slice.call (argumen, 1)): "object"! = typeof t && t? void i.error ("Metode" + t + "tidak ada di jQuery.pietimer"): e.init.apply (ini, argumen)} } (jQuery);
